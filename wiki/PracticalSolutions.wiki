= Solutions of exercises =

== Practical 1 ==

=== Exercise 1 ===
  # See the tacsat and eflalo description (available under the download tab) for more info
  # 'chr' stands for 'character', a string of letters. 'num' stands for 'numeric', which is a number with decimal places.
  # Perhaps you've seen 'int' for 'integer' which is a full real number (no digits). You'll come across 'list', 'factor', 'matrix', 'array' or 'data.frame' a lot.
   
=== Exercise 2 ===
  # See the tacsat and eflalo description (available under the download tab) for more info
  # The two new classes are: 'factor' and 'logi' for logical. Logical can only take two value, either TRUE or FALSE. Factor might look like a number or a character, but is neither of both. It is a sort of category classification, like in clinical tests where you might have a group A and B which have e.g. a treatment in common but both groups come from different cities.
  # That would be 3050242 KG of plaice. You'll get that by using the following code: {{{sum(eflalo$LE_KG_PLE,na.rm=T)}}}
  
=== Exercise 3 ===
  # Run the {{{str(eflalo)}}} command to see if your formats are correct
  # If columns out of your eflalo dataset are not yet in the right format, this function will convert those columns into the right format. Check before and after using the function with {{{str(eflalo)}}}.
  # I hope so, but please consult one of the instructors if you get stuck
  
=== Exercise 4 ===
1. This is a bit tricky, because the vessel names are 'characters' and therefore not numbers. R is not that picky howver but let's do it the right way here.

<code>
#Create a new column with numeric names for the vessel ID's
tacsat$numericName <- as.numeric(tacsat$VE_REF)
tacsatPartOne      <- subset(tacsat,VE_REF <  1000)
tacsatPartTwo      <- subset(tacsat,VE_REF >= 1000)

#Save to disk
#First set path where I want to save these files
path2Save          <- "D:/output/" #different on everyones computer
write.table(tacsatPartOne, file = file.path(path2Save,"tacsatPartOne.csv"), quote = TRUE, sep = ",",
       eol = "\n", na = "NA", dec = ".", row.names = F,col.names = TRUE)
write.table(tacsatPartTwo, file = file.path(path2Save,"tacsatPartTwo.csv"), quote = TRUE, sep = ",",
       eol = "\n", na = "NA", dec = ".", row.names = F,col.names = TRUE)
</code>

2. We read both files in using the readTacsat function and thereafter combine them

<code>
tacsatPartOne      <- readTacsat(file.path(path2Save,"tacsatPartOne.csv"))
tacsatPartTwo      <- readTacsat(file.path(path2Save,"tacsatPartTwo.csv"))

#Combine the two datasets
totalTacsat        <- rbindTacsat(tacsatPartOne,tacsatPartTwo)
</code>

3. Again 97015 rows of data with 9 columns. That is similar to: {{{data(tacsat); nrow(tacsat)}}}
  
== Practical 2 ==

=== Exercise 1 ===
  # That is Helgoland harbour
  # In total 3839. You'll get to this number by checking: {{{data(euharbours); nrow(harbours)}}}
  # Please read the help file of 'euharbours' {{{?euharbours}}}  The range defines the radius, from the harbour midpoint, the harbour spans. I.e. every VMS point inside this 'range' is classified as being in harbour.

=== Exercise 2 ===
  # Have a look at the Nations of vessels present in your dataset. Often you can have access to VMS pings of foreign vessels but not have access to logbook data. You could also screen for artefacts in GPS positions. I've seen for example simple plots of VMS points with strange patterns popping up because a mistake was made in converting from minute to decimal notation.
  # {{{table(tacsat$VE_COU)}}}; {{{plot(tacsat$SI_LONG,tacsat$SI_LATI,pch=".",type="p")}}}

=== Exercise 3 ===
1. This is how it's done:

<code>
#Find tacsat records with mesh size > 150mm
idx <- which(eflaloLE_MSZ > 150)
#Remove them from your file
eflalo <- eflalo[-idx,]
#count how many there were
print(length(idx))
</code>

2. Let's make a selection of these vessels and then look at their characteristics in two ways
<code>
#eflaloLV = eflalo Large Vessels
eflaloLV <- subset(eflalo,VE_LEN > 100)

#What are their characteristics
summarizeEflalo(eflaloLV)

#Find the gears
table(eflaloLV$LE_GEAR)

#Find their catch
sort(colSums(eflaloLV[,kgeur(colnames(eflaloLV))],na.rm=T))


  