= How to link VMS data with other spatial datasets =

== Introduction ==
The number of VMS data requests and analyses have gone up tremendously over the past years. The number of papers written on VMS analyses have followed this increase too. Many of them deal with issues like: how should you clean your data, how should you link VMS and logbook data, what grid size is best to use and also how to calculate your indicators. This already shows that although most of the tools are available, at the advisory level, no consensus has been reached as yet on how exactly to tackle these issues.

At the same time, VMS and logbook data are associated with confidentiality issues, which makes it much more difficult to combine datasets of different nations. Although VMStools presents a framework that can be applied by many different nations at exactly the same manner, also combined with the FishFrame database that might hold VMS data at some point, no such results have been reported yet. 

Most of you are here however to do science, and contributing to the discussions outlined above might not be as satisfactory for you. Well, here is a challenge! So far, hardly any papers have discussed the relationship between VMS and covariates as temperature, seabed or wave hight. Why not? Potentially because it is difficult to line all these different datasets up and do the statistics. 

Within this practical I'll show you how you can start exploring these interesting aspects, which was one of the core goals to develop VMStools: to quickly deal with the 'un-interesting stuff' of cleaning and linking and get to the explanatory relationships as soon as possible!

== Getting and preparing spatial data ==
One requirement of spatial data is that it contains some sort of position identifier. This could be a shapefile / polygon or a longitude-latitude position(like the start or midpoint of a survey trawl). 

In this practical I'll show how to link VMS data with such a shapefile (habitat) and with some phyto plankton data.

=== Link VMS with habitat map ===
The good thing about habitat (as in substrate) is that is doesn't change much over time. Once somebody has created a map, you can use it for quite some time and there is no need to update your code. Please now download the [http://code.google.com/p/vmstools/downloads/list HabitatMaps.zip], store it somewhere on your harddrive (somewhere easy, because you need to link to at later on) and unzip it!

The habitat map is a shapefile and we'll make some plots first to see what it is all about. Thereafter we'll link VMS points up with the habitats and show where most of e.g. the beam trawling has taken place.

<code>
#Find the path to your habitat map 
>path <- "D:/HabitatMaps/"
>habitat <- readShapePoly(paste(path,"ModelledSeabedHabitats.shp",sep=""))

#We can simply plot it
>plot(habitat) #But it doesn't make much sense...
>names(habitat)
>slotNames(habitat)
#The way the file is constructed is that it has a large number of polygons (167). 
#Each of these polygons can be associated with e.g. substrate or salinity. 
#The same polygons are used for substrate and salinity but the polygons belonging to the same substrate is not necessarily the same polygons that belong to the same salinity value. 

#Let's plot the substrate types around the North Sea
>require(maps);require(mapdata)
>map("worldHires",xlim=c(-5,10),ylim=c(48,62),fill=T,col="darkgreen"); 
#What substrate levels do we have?
>levels(habitat$substrate) #apparently 7 different substrates
#Define 7 different colors
>colrs <- c(
"lightblue","brown","yellow","slategray","green","red",
"blue")
#Turn the polygons into spatial polygons
>sp <- SpatialPolygons(habitat@polygons)
#Look at the order of plotting
>sp@plotOrder
>plot(sp,col=colrs[an(habitat$substrate)],border=colrs[an(habitat$substrate)],add=T)
>lcolrs <- length(colrs)+1
>legend("bottomleft",legend=c("Land",levels(habitat$substrate)),
        lwd=c(1,1,1,1),lty=rep(NA,10),pch=rep(22,lcolrs),ncol=2,
        col=rep("black",lcolrs), pt.bg=c("darkgreen",colrs),pt.cex=rep(3,lcolrs),box.lty=1,box.lwd=2,
        y.intersp=1.5,title="Substrate type",bg="white",cex=0.5)
>map.axes()
</code>
You might get puzzled from such shapefiles but after a while you'll get a grip on how to handle those! Let's see if we can link VMS pings with substrate type. We must be careful now however. This particular shapefile contains polygons inside polygons. So, if we test if one VMS ping is inside any of the polygons, it might hit 'yes' more than once. So, which one is the right one? Luckily, the file also comes with a plotting order, we need to watch that!
<code>